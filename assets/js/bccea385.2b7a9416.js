"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[557],{3905:function(e,n,t){t.d(n,{kt:function(){return f}});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=i.createContext({}),l=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),f=l(t),d=r,_=f["".concat(c,".").concat(d)]||f[d]||p[d]||a;return t?i.createElement(_,o(o({ref:n},u),{},{components:t})):i.createElement(_,o({ref:n},u))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<a;l++)o[l]=t[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5519:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return f}});var i=t(7462),r=t(3366),a=(t(7294),t(3905)),o=["components"],s={title:"Accept specific tenants only",sidebar_position:3},c=void 0,l={unversionedId:"multi-tenant/accept_specific_tenants_only",id:"multi-tenant/accept_specific_tenants_only",isDocsHomePage:!1,title:"Accept specific tenants only",description:"If your multi-tenant application only should accept a few tenants, you'll have to verify issuers, or the iss field in the JWT.",source:"@site/docs/multi-tenant/accept_specific_tenants_only.mdx",sourceDirName:"multi-tenant",slug:"/multi-tenant/accept_specific_tenants_only",permalink:"/multi-tenant/accept_specific_tenants_only",editUrl:"https://github.com/Intility/FastAPI-Azure-Auth/edit/main/docs/docs/multi-tenant/accept_specific_tenants_only.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Accept specific tenants only",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"FastAPI configuration",permalink:"/multi-tenant/fastapi_configuration"},next:{title:"Locking down on roles",permalink:"/multi-tenant/locking_down_on_roles"}},p=[{value:"More sophisticated callable",id:"more-sophisticated-callable",children:[]}],u={toc:p};function f(e){var n=e.components,t=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"If your multi-tenant application only should accept a few tenants, you'll have to verify ",(0,a.kt)("inlineCode",{parentName:"p"},"issuers"),", or the ",(0,a.kt)("inlineCode",{parentName:"p"},"iss")," field in the JWT."),(0,a.kt)("p",null,"We'll take the last code snippet from ",(0,a.kt)("a",{parentName:"p",href:"fastapi_configuration"},"FastAPI configuration")," and change a few lines of code to make\nthis happen:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python",metastring:"{8,42-49,56-57}","{8,42-49,56-57}":!0},"from typing import Union\n\nimport uvicorn\nfrom fastapi import FastAPI, Security\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom pydantic import AnyHttpUrl, BaseSettings, Field\nfrom fastapi_azure_auth import MultiTenantAzureAuthorizationCodeBearer\nfrom fastapi_azure_auth.exceptions import InvalidAuth\n\n\nclass Settings(BaseSettings):\n    SECRET_KEY: str = Field('my super secret key', env='SECRET_KEY')\n    BACKEND_CORS_ORIGINS: list[Union[str, AnyHttpUrl]] = ['http://localhost:8000']\n    OPENAPI_CLIENT_ID: str = Field(default='', env='OPENAPI_CLIENT_ID')\n    APP_CLIENT_ID: str = Field(default='', env='APP_CLIENT_ID')\n\n    class Config:\n        env_file = '.env'\n        env_file_encoding = 'utf-8'\n        case_sensitive = True\n\nsettings = Settings()\n\napp = FastAPI(\n    swagger_ui_oauth2_redirect_url='/oauth2-redirect',\n    swagger_ui_init_oauth={\n        'usePkceWithAuthorizationCodeGrant': True,\n        'clientId': settings.OPENAPI_CLIENT_ID,\n    },\n)\n\nif settings.BACKEND_CORS_ORIGINS:\n    app.add_middleware(\n        CORSMiddleware,\n        allow_origins=[str(origin) for origin in settings.BACKEND_CORS_ORIGINS],\n        allow_credentials=True,\n        allow_methods=['*'],\n        allow_headers=['*'],\n    )\n\n\nasync def check_if_valid_tenant(tid: str) -> str:\n    tid_to_iss_mapping = {\n        '9b5ff18e-53c0-45a2-8bc2-9c0c8f60b2c6': 'https://login.microsoftonline.com/9b5ff18e-53c0-45a2-8bc2-9c0c8f60b2c6/v2.0'\n    }\n    try:\n        return tid_to_iss_mapping[tid]\n    except KeyError:\n        raise InvalidAuth('Tenant not allowed')\n\nazure_scheme = MultiTenantAzureAuthorizationCodeBearer(\n    app_client_id=settings.APP_CLIENT_ID,\n    scopes={\n        f'api://{settings.APP_CLIENT_ID}/user_impersonation': 'user_impersonation',\n    },\n    validate_iss=True,\n    valid_tenants_callable=check_if_valid_tenant\n)\n\n\n@app.on_event('startup')\nasync def load_config() -> None:\n    \"\"\"\n    Load OpenID config on startup.\n    \"\"\"\n    await azure_scheme.openid_config.load_config()\n\n\n@app.get(\"/\", dependencies=[Security(azure_scheme)])\nasync def root():\n    return {\"message\": \"Hello World\"}\n\n\nif __name__ == '__main__':\n    uvicorn.run('main:app', host='localhost', port=8000, reload=True)\n")),(0,a.kt)("p",null,"We're first creating an ",(0,a.kt)("inlineCode",{parentName:"p"},"async function"),", which takes a ",(0,a.kt)("inlineCode",{parentName:"p"},"tid")," as an argument, and returns the tenant ID's ",(0,a.kt)("inlineCode",{parentName:"p"},"iss")," if it's a valid tenant.\nIf it's not a valid tenant, it has to raise an ",(0,a.kt)("inlineCode",{parentName:"p"},"InvalidAuth()")," exception."),(0,a.kt)("h2",{id:"more-sophisticated-callable"},"More sophisticated callable"),(0,a.kt)("p",null,"If you want to cache these results in memory, you can do so by creating a more sophisticated callable:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'class IssuerFetcher:\n    def __init__(self) -> None:\n        """\n        Example class for multi tenant apps, that caches issuers for an hour\n        """\n        self.tid_to_iss: dict[str, str] = {}\n        self._config_timestamp: Optional[datetime] = None\n\n    async def __call__(self, tid: str) -> str:\n        """\n        Check if memory cache needs to be updated or not, and then returns an issuer for a given tenant\n        :raises InvalidAuth when it\'s not a valid tenant\n        """\n        refresh_time = datetime.now() - timedelta(hours=1)\n        if not self._config_timestamp or self._config_timestamp < refresh_time:\n            self._config_timestamp = datetime.now()\n            # logic to find your allowed tenants and it\'s issuers here\n            # (This example cache in memory for 1 hour)\n            self.tid_to_iss = {\n                \'intility_tenant\': \'intility_tenant\',\n            }\n        try:\n            return self.tid_to_iss[tid]\n        except Exception as error:\n            log.exception(\'`iss` not found for `tid` %s. Error %s\', tid, error)\n            raise InvalidAuth(\'You must be an Intility customer to access this resource\')\n\n\nissuer_fetcher = IssuerFetcher()\n\nazure_scheme = MultiTenantAzureAuthorizationCodeBearer(\n    ...\n    validate_iss=True,\n    valid_tenants_callable=issuer_fetcher\n)\n')))}f.isMDXComponent=!0}}]);